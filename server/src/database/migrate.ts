/**
 * Bun„Éç„Ç§„ÉÜ„Ç£„ÉñsqliteÁî®„Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥
 * Phase 0 Day 2 - SQL„Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥ÂÆüË°å
 */

import Database from 'bun:sqlite';
import { readFileSync } from 'fs';
import { join } from 'path';

const DB_PATH = process.env.DATABASE_URL || './data/dev.db';

export async function runMigrations() {
  const db = new Database(DB_PATH);
  
  try {
    console.log('üîß Running migrations with Bun SQLite...');
    
    // WAL„É¢„Éº„Éâ„Å®„Åù„ÅÆ‰ªñ„ÅÆÊúÄÈÅ©ÂåñË®≠ÂÆö
    db.run('PRAGMA journal_mode = WAL');
    db.run('PRAGMA synchronous = NORMAL');
    db.run('PRAGMA cache_size = 1000');
    db.run('PRAGMA foreign_keys = ON');
    
    // „Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥„ÉÜ„Éº„Éñ„É´„ÅÆ‰ΩúÊàê
    db.run(`
      CREATE TABLE IF NOT EXISTS __drizzle_migrations (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        hash TEXT NOT NULL,
        created_at INTEGER NOT NULL
      )
    `);
    
    // ÊúÄÊñ∞„ÅÆ„Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥Á¢∫Ë™ç
    const migrationPath = join(process.cwd(), 'drizzle/0000_fair_malice.sql');
    const migrationSQL = readFileSync(migrationPath, 'utf-8');
    
    // „Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥„ÅåÊó¢„Å´ÂÆüË°å„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
    const existingMigration = db.query('SELECT * FROM __drizzle_migrations WHERE hash = ?').get('0000_fair_malice');
    
    if (!existingMigration) {
      console.log('üìù Executing migration: 0000_fair_malice');
      
      // SQL„Çπ„ÉÜ„Éº„Éà„É°„É≥„Éà„ÇíÂàÜÂâ≤„Åó„Å¶ÂÆüË°å
      const statements = migrationSQL
        .split('--> statement-breakpoint')
        .map(stmt => stmt.trim())
        .filter(stmt => stmt.length > 0);
      
      db.run('BEGIN TRANSACTION');
      
      try {
        for (const statement of statements) {
          if (statement.trim()) {
            db.run(statement);
          }
        }
        
        // „Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥Ë®òÈå≤„ÇíËøΩÂä†
        db.run(
          'INSERT INTO __drizzle_migrations (hash, created_at) VALUES (?, ?)',
          '0000_fair_malice',
          Math.floor(Date.now() / 1000)
        );
        
        db.run('COMMIT');
        console.log('‚úÖ Migration completed successfully');
      } catch (error) {
        db.run('ROLLBACK');
        throw error;
      }
    } else {
      console.log('‚úÖ Database already up to date');
    }
    
  } catch (error) {
    console.error('‚ùå Migration failed:', error);
    throw error;
  } finally {
    db.close();
  }
}

// „Çπ„Çø„É≥„Éâ„Ç¢„É≠„É≥ÂÆüË°å
if (import.meta.main) {
  await runMigrations();
}
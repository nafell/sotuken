import { Hono } from 'hono';
import * as fs from 'fs/promises';
import * as path from 'path';

const configRoutes = new Hono();

/**
 * Ë®≠ÂÆöÈÖçÂ∏ÉAPI
 * GET /v1/config
 * 
 * ÁõÆÁöÑ: „ÇØ„É©„Ç§„Ç¢„É≥„Éà„Å´ÂÆüÈ®ìÊù°‰ª∂„ÄÅÈáç„ÅøË®≠ÂÆö„ÄÅUIÁîüÊàê„Éë„É©„É°„Éº„Çø„ÇíÈÖçÂ∏É
 */
configRoutes.get('/', async (c) => {
  try {
    // config.v1.json „ÇíË™≠„ÅøËæº„Åø
    const configPath = path.join(process.cwd(), '../config/config.v1.json');
    const configContent = await fs.readFile(configPath, 'utf-8');
    const baseConfig = JSON.parse(configContent);
    
    // „É™„ÇØ„Ç®„Çπ„Éà„Éò„ÉÉ„ÉÄ„Éº„Åã„ÇâÂåøÂêç„É¶„Éº„Ç∂„ÉºID„ÇíÂèñÂæó
    const anonymousUserId = c.req.header('X-User-ID') || 'anonymous';
    
    // ÂÆüÈ®ìÊù°‰ª∂Ââ≤„ÇäÂΩì„Å¶ÔºàPhase 0„Åß„ÅØÂõ∫ÂÆö„ÄÅPhase 1„ÅßÂãïÁöÑÂâ≤„ÇäÂΩì„Å¶ÂÆüË£ÖÔºâ
    const experimentAssignment = {
      condition: "dynamic_ui", // TODO: ÂÆüÈöõ„ÅÆÂâ≤„ÇäÂΩì„Å¶„É≠„Ç∏„ÉÉ„ÇØ
      assignedAt: new Date().toISOString(),
      experimentId: "exp_001"
    };
    
    // Ë®≠ÂÆö„É¨„Çπ„Éù„É≥„ÇπÊßãÁØâ
    const configResponse = {
      configVersion: baseConfig.configVersion,
      weightsVersion: baseConfig.weightsVersion,
      experimentAssignment,
      weights: baseConfig.weights,
      uiNoveltyPolicy: baseConfig.uiNoveltyPolicy,
      model: baseConfig.model
    };
    
    // „É¨„Çπ„Éù„É≥„Çπ„Éò„ÉÉ„ÉÄ„ÉºË®≠ÂÆö
    c.header('Content-Type', 'application/json');
    c.header('Cache-Control', 'public, max-age=300'); // 5ÂàÜ„Ç≠„É£„ÉÉ„Ç∑„É•
    
    console.log(`üì§ Config served to user: ${anonymousUserId}, condition: ${experimentAssignment.condition}`);
    
    return c.json(configResponse);
    
  } catch (error) {
    console.error('‚ùå Config API error:', error);
    
    // „Ç®„É©„Éº„É¨„Çπ„Éù„É≥„Çπ
    return c.json({
      error: {
        code: "CONFIG_UNAVAILABLE",
        message: "Configuration service temporarily unavailable",
        retryAfterMs: 30000
      }
    }, 500);
  }
});

/**
 * Ë®≠ÂÆö„Éê„Éº„Ç∏„Éß„É≥Á¢∫Ë™çAPI
 * GET /v1/config/version
 */
configRoutes.get('/version', async (c) => {
  try {
    const configPath = path.join(process.cwd(), '../config/config.v1.json');
    const configContent = await fs.readFile(configPath, 'utf-8');
    const baseConfig = JSON.parse(configContent);
    
    return c.json({
      configVersion: baseConfig.configVersion,
      weightsVersion: baseConfig.weightsVersion,
      dslVersion: baseConfig.dslVersion,
      lastUpdated: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå Config version check error:', error);
    return c.json({
      error: {
        code: "VERSION_CHECK_FAILED",
        message: "Unable to check configuration version"
      }
    }, 500);
  }
});

export { configRoutes };
